{"ast":null,"code":"import * as SQLite from \"expo-sqlite\";\nvar db = SQLite.openDatabase(\"address.db\");\nexport var init = function init() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"CREATE TABLE IF NOT EXISTS userLocation (lat REAL NOT NULL, lng REAL NOT NULL);\", [], function () {\n        return resolve();\n      }, function (_, err) {\n        return reject(err);\n      });\n      tx.executeSql(\"CREATE TABLE IF NOT EXISTS auth (userName TEXT NOT NULL, token TEXT NOT NULL, email TEXT NOT NULL);\", [], function () {\n        return resolve();\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertUserLocation = function insertUserLocation(lat, lng) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"INSERT INTO userLocation (lat, lng) values (?, ?);\", [lat, lng], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchUserLocation = function fetchUserLocation() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM userLocation;\", [], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var deleteUserLocation = function deleteUserLocation() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"DELETE FROM userLocation \", [], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertAuth = function insertAuth(userName, token, email) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"INSERT INTO auth (userName, token, email) values (?, ?, ?);\", [userName, token, email], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchAuth = function fetchAuth() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM auth;\", [], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var deleteAuth = function deleteAuth() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"DELETE FROM auth \", [], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};","map":{"version":3,"sources":["/Users/mati/CoderHouse/APP/1-intro/5-proyect/db/index.js"],"names":["SQLite","db","openDatabase","init","promise","Promise","resolve","reject","transaction","tx","executeSql","_","err","insertUserLocation","lat","lng","result","fetchUserLocation","deleteUserLocation","insertAuth","userName","token","email","fetchAuth","deleteAuth"],"mappings":"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","sourcesContent":["import * as SQLite from \"expo-sqlite\";\n\nconst db = SQLite.openDatabase(\"address.db\");\n\nexport const init = () => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"CREATE TABLE IF NOT EXISTS userLocation (lat REAL NOT NULL, lng REAL NOT NULL);\",\n        [],\n        () => resolve(),\n        (_, err) => reject(err)\n      );\n      tx.executeSql(\n        \"CREATE TABLE IF NOT EXISTS auth (userName TEXT NOT NULL, token TEXT NOT NULL, email TEXT NOT NULL);\",\n        [],\n        () => resolve(),\n        (_, err) => reject(err)\n      );\n    });\n  });\n\n  return promise;\n};\n\nexport const insertUserLocation = (lat, lng) => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"INSERT INTO userLocation (lat, lng) values (?, ?);\",\n        [lat, lng],\n        (_, result) => resolve(result),\n        (_, err) => reject(err)\n      );\n    });\n  });\n\n  return promise;\n};\n\nexport const fetchUserLocation = () => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"SELECT * FROM userLocation;\",\n        [],\n        (_, result) => resolve(result),\n        (_, err) => reject(err)\n      );\n    });\n  });\n  return promise;\n};\n\nexport const deleteUserLocation = () => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"DELETE FROM userLocation \",\n        [],\n        (_, result) => resolve(result),\n        (_, err) => reject(err)\n      );\n    });\n  });\n  return promise;\n};\n\nexport const insertAuth = (userName, token, email) => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"INSERT INTO auth (userName, token, email) values (?, ?, ?);\",\n        [userName, token, email],\n        (_, result) => resolve(result),\n        (_, err) => reject(err)\n      );\n    });\n  });\n\n  return promise;\n};\n\nexport const fetchAuth = () => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"SELECT * FROM auth;\",\n        [],\n        (_, result) => resolve(result),\n        (_, err) => reject(err)\n      );\n    });\n  });\n  return promise;\n};\n\nexport const deleteAuth = () => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"DELETE FROM auth \",\n        [],\n        (_, result) => resolve(result),\n        (_, err) => reject(err)\n      );\n    });\n  });\n  return promise;\n};\n"]},"metadata":{},"sourceType":"module"}