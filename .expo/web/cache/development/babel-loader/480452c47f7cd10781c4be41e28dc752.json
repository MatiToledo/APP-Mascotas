{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { React, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport { mapSearch } from \"../lib/api\";\nimport MyButton from \"../ui/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Maps(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      marker = _useState4[0],\n      setMarker = _useState4[1];\n\n  var initialRegion = {\n    latitude: -31.409593,\n    longitude: -64.193721,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n\n  function handleLocation(t) {\n    setLocation(t);\n  }\n\n  function handleSearch() {\n    var results, result, lat, lng;\n    return _regeneratorRuntime.async(function handleSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(mapSearch(location));\n\n          case 2:\n            results = _context.sent;\n\n            if (!results.results[0]) {\n              Alert.alert(\"No encontramos ninguna ubicación con esa dirección, intente nuevamente\");\n            } else {\n              result = results.results[0];\n              lat = result.geometry.location.lat;\n              lng = result.geometry.location.lng;\n              setMarker({\n                lat: lat,\n                lng: lng\n              });\n              props.handleGeoData({\n                petUbication: location,\n                lastlocationLat: lat,\n                lastlocationLng: lng\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsxs(View, {\n      style: styles.search,\n      children: [_jsxs(View, {\n        style: styles.input,\n        children: [_jsx(Text, {\n          style: styles.label,\n          children: \"Direcci\\xF3n\"\n        }), _jsx(TextInput, {\n          style: styles.textInput,\n          placeholder: \"  Busque una direcci\\xF3n\",\n          value: location,\n          onChangeText: handleLocation\n        })]\n      }), _jsx(MyButton, {\n        variant: \"secondary\",\n        onPress: handleSearch,\n        title: \"Buscar\"\n      }), _jsx(MapView, {\n        region: marker !== null ? {\n          latitude: marker.lat,\n          longitude: marker.lng,\n          latitudeDelta: 0.0054,\n          longitudeDelta: 0.0054\n        } : null,\n        style: styles.map,\n        children: marker !== null ? _jsx(Marker, {\n          coordinate: {\n            latitude: marker.lat,\n            longitude: marker.lng\n          }\n        }) : null\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  search: {\n    flex: 1\n  },\n  input: {\n    marginBottom: 15\n  },\n  label: {\n    fontFamily: \"InterRegular\",\n    fontWeight: \"400\",\n    fontSize: 16\n  },\n  textInput: {\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 7,\n    width: \"100%\",\n    padding: 2\n  },\n  map: {\n    width: 300,\n    height: 220,\n    marginVertical: 15\n  }\n});","map":{"version":3,"sources":["/Users/mati/CoderHouse/APP/1-intro/5-proyect/components/Maps.js"],"names":["React","useState","MapView","Marker","mapSearch","MyButton","Maps","props","location","setLocation","marker","setMarker","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta","handleLocation","t","handleSearch","results","Alert","alert","result","lat","geometry","lng","handleGeoData","petUbication","lastlocationLat","lastlocationLng","flex","styles","search","input","label","textInput","map","StyleSheet","create","marginBottom","fontFamily","fontWeight","fontSize","borderColor","borderWidth","borderRadius","width","padding","height","marginVertical"],"mappings":"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","sourcesContent":["import { React, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n  Image,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport { mapSearch } from \"../lib/api\";\n\nimport MyButton from \"../ui/Button\";\n\nexport default function Maps(props) {\n  const [location, setLocation] = useState(\"\");\n  // const [lat, setLat] = useState(-31.409593);\n  // const [lng, setLng] = useState(-64.193721);\n  const [marker, setMarker] = useState(null);\n  const initialRegion = {\n    latitude: -31.409593,\n    longitude: -64.193721,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  };\n\n  function handleLocation(t) {\n    setLocation(t);\n  }\n\n  async function handleSearch() {\n    const results = await mapSearch(location);\n\n    if (!results.results[0]) {\n      Alert.alert(\n        \"No encontramos ninguna ubicación con esa dirección, intente nuevamente\"\n      );\n    } else {\n      const result = results.results[0];\n      const lat = result.geometry.location.lat;\n      const lng = result.geometry.location.lng;\n      setMarker({\n        lat,\n        lng,\n      });\n\n      props.handleGeoData({\n        petUbication: location,\n        lastlocationLat: lat,\n        lastlocationLng: lng,\n      });\n    }\n  }\n\n  return (\n    <View style={{ flex: 1 }}>\n      <View style={styles.search}>\n        <View style={styles.input}>\n          <Text style={styles.label}>Dirección</Text>\n          <TextInput\n            style={styles.textInput}\n            placeholder=\"  Busque una dirección\"\n            value={location}\n            onChangeText={handleLocation}\n          ></TextInput>\n        </View>\n        <MyButton\n          variant=\"secondary\"\n          onPress={handleSearch}\n          title=\"Buscar\"\n        ></MyButton>\n        <MapView\n          region={\n            marker !== null\n              ? {\n                  latitude: marker.lat,\n                  longitude: marker.lng,\n                  latitudeDelta: 0.0054,\n                  longitudeDelta: 0.0054,\n                }\n              : null\n          }\n          style={styles.map}\n        >\n          {marker !== null ? (\n            <Marker\n              coordinate={{\n                latitude: marker.lat,\n                longitude: marker.lng,\n              }}\n            ></Marker>\n          ) : null}\n        </MapView>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  search: {\n    // flexDirection: \"row\",\n    flex: 1,\n  },\n  input: {\n    marginBottom: 15,\n  },\n  label: {\n    fontFamily: \"InterRegular\",\n    fontWeight: \"400\",\n    fontSize: 16,\n  },\n  textInput: {\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 7,\n    width: \"100%\",\n    padding: 2,\n  },\n  map: {\n    width: 300,\n    height: 220,\n    marginVertical: 15,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}